import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";

import { api } from "~/utils/api";
import type { RouterOutputs } from "~/utils/api";
import { SignIn, SignInButton, SignOutButton, useUser } from "@clerk/nextjs";
import {
  Button,
  Container,
  Flex,
  Heading,
  Image,
  Input,
  Spinner,
  Text,
} from "@chakra-ui/react";

import ChakraNextImage from "~/components/ChakraNextImage";
import { useState } from "react";

const CreatePost = () => {
  const [input, setInput] = useState("");
  const { user } = useUser();

  const ctx = api.useContext();

  const { mutate, isLoading: isPosting } = api.posts.create.useMutation({
    onSuccess: () => {
      setInput("");
      void ctx.posts.getAll.invalidate();
    },
  });

  if (!user) return null;

  return (
    <Flex
      gap="4"
      borderY="1px solid"
      borderColor="border"
      p="4"
      w="100%"
      flexDir="column"
    >
      <Flex>
        <Flex width="10%">
          <ChakraNextImage
            borderRadius="100px"
            height="14"
            width="14"
            src={user.profileImageUrl}
            alt="profileImage"
          />
        </Flex>
        <Input
          placeholder="TuiteÃ¡ tus emojis"
          type="text"
          bg="transparent"
          color="primary"
          border="none"
          size="lg"
          _focusVisible={{ border: "none" }}
          w="90%"
          value={input}
          onChange={(e) => setInput(e.target.value)}
          disabled={isPosting}
        />
      </Flex>
      <Flex justify="flex-end">
        <Button
          bg="secondary"
          color="primary"
          borderRadius="2xl"
          _hover={{ bg: "secondary", color: "primary" }}
          _active={{ bg: "secondary", color: "primary" }}
          onClick={() => mutate({ content: input })}
        >
          Twittear
        </Button>
      </Flex>
    </Flex>
  );
};

type PostWithUser = RouterOutputs["posts"]["getAll"][number];
const PostView = (props: PostWithUser) => {
  const { post, author } = props;

  const date = new Date(post.createdAt);
  const postDate = date.toLocaleTimeString("es-AR", {
    hour: "numeric",
    minute: "numeric",
  });

  return (
    <Flex
      key={post.id}
      px="3"
      py="6"
      borderBottom="1px solid"
      borderColor="border"
      align="center"
      gap="6"
    >
      <ChakraNextImage
        src={author.profileImageUrl}
        borderRadius="100px"
        height="14"
        width="14"
        alt="Profile image"
      />
      <Flex flexDir="column" gap="2">
        <Heading as="h4" fontSize="md" color="primary" fontWeight="bold">
          {author.username}
          <span
            style={{ marginLeft: "10px", fontWeight: "normal", color: "gray" }}
          >
            @{author.username} - {postDate}
          </span>
        </Heading>
        <Text color="primary" fontSize="xl">
          {post.content}
        </Text>
      </Flex>
    </Flex>
  );
};

const Feed = () => {
  const { data, isLoading } = api.posts.getAll.useQuery();

  if (isLoading)
    return (
      <Flex h="100%" w="100%" justify="center" align="center">
        <Spinner />
      </Flex>
    );

  if (!data)
    return (
      <Flex h="100%" w="100%" justify="center" align="center">
        No se encontraron tweets
      </Flex>
    );

  return (
    <Flex flexDir="column">
      {data.map((fullPost) => (
        <PostView {...fullPost} key={fullPost.post.id} />
      ))}
    </Flex>
  );
};

const Home: NextPage = () => {
  api.posts.getAll.useQuery();
  const { user, isLoaded, isSignedIn } = useUser();

  if (!user) return <SignInButton />;

  if (!isLoaded)
    return (
      <Flex h="100%" w="100%" align="center" justify="center" bg="bg">
        <Spinner color="primary" size="sm" />
      </Flex>
    );

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container maxW="container.2xl" h="100%" bg="bg">
        <Flex flexDir="column" maxW="container.sm" h="100%" m="auto">
          <Heading as="h2" color="primary" fontSize="2xl" p="3">
            Inicio
          </Heading>
          {isSignedIn && <CreatePost />}
          <Feed />
        </Flex>
      </Container>
    </>
  );
};

export default Home;
